// Generated using `moon info`, DON'T EDIT IT
package "Milky2018/selene/collision"

import(
  "Milky2018/selene/math"
  "Milky2018/selene/system"
  "moonbitlang/core/set"
)

// Values
fn area_click_system(&@system.Backend) -> Unit

fn area_collide_system(&@system.Backend) -> Unit

let areas : Map[@system.Entity, Area]

let collides : Map[@system.Entity, Collide]

fn get_collision_infos(@system.Entity) -> Array[CollisionInfo]

fn is_on_the_floor(@system.Entity) -> Bool

fn move_system(&@system.Backend) -> Unit

fn quadtree_render_system(&@system.Backend) -> Unit

let quadtree_root : QuadTree

// Errors

// Types and methods
pub(all) struct Area {
  shape : CollisionShape
  layer : CollisionLayer
  mask : CollisionMask
  on_enter_callbacks : Array[(@system.Entity) -> Unit]
  on_exit_callbacks : Array[(@system.Entity) -> Unit]
  on_pressed_callbacks : Array[(@system.MouseButton) -> Unit]
  on_released_callbacks : Array[(@system.MouseButton) -> Unit]
  on_just_pressed_callbacks : Array[(@system.MouseButton) -> Unit]
  on_just_released_callbacks : Array[(@system.MouseButton) -> Unit]
  mut last_contains : @set.Set[@system.Entity]
  mut monitoring_mouse : Bool
}
fn Area::new(CollisionShape, CollisionLayer, CollisionMask, monitoring_mouse? : Bool) -> Self
fn Area::on_enter(Self, (@system.Entity) -> Unit) -> Unit
fn Area::on_exit(Self, (@system.Entity) -> Unit) -> Unit
fn Area::on_just_pressed(Self, (@system.MouseButton) -> Unit) -> Unit
fn Area::on_just_released(Self, (@system.MouseButton) -> Unit) -> Unit
fn Area::on_pressed(Self, (@system.MouseButton) -> Unit) -> Unit
fn Area::on_released(Self, (@system.MouseButton) -> Unit) -> Unit

pub(all) struct Collide {
  shape : CollisionShape
  layer : CollisionLayer
  mask : CollisionMask
}

pub struct CollisionInfo {
  entity : @system.Entity
  direction : @math.Vec2D
}

pub struct CollisionLayer(UInt)
fn CollisionLayer::inner(Self) -> UInt
fn CollisionLayer::new() -> Self
impl Eq for CollisionLayer

pub struct CollisionMask(Array[CollisionLayer])
fn CollisionMask::empty() -> Self
fn CollisionMask::inner(Self) -> Array[CollisionLayer]
fn CollisionMask::new(Array[CollisionLayer]) -> Self

pub(all) enum CollisionShape {
  Rect(size~ : @math.Vec2D, offset~ : @math.Vec2D)
}

pub struct QuadTree {
  position : @math.Vec2D
  size : @math.Vec2D
  children : Array[QuadTree]
  // private fields
}

// Type aliases

// Traits

